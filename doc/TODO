T E C H N O L O G I C A L   D E B T
-----------------------------------

All the things that need to be corrected, but where there is a reason not to do it now.

Engines
-------
- Flash
  The location rewrite of the before redirect modifier should be normalized and put in a proper place for more generic use.
  The problem is to find the right place.
  There's a 'use URI' which is a red flag that this is the wrong place.

Framework
---------
- Best Practices
  namespace::autoclean

Parts
-----
- Update
  The default is the processed data upon failure.
  - Check this: html field w/markup. The html tags are visible if there is a failure.

E N H A N C E M E N T S
-----------------------

Basetype modifiers
- Branch is feature-basetype_modifier
- Used from a data node (probably the data part of the node) to extend the functionality of the node.
- Should work for basenodes as well as common DBIC searches
- Implementation:
  Perhaps something like 
  Have a function on the data node finding the basetype, instantiates a class and calling a method there with the data node as parameter

Update process
- More dynamic properties
  Reorder fields
  - In some cases, the default (from basetype) order is not the desired one. Perhaps there could be a field-order attribute.
  Add / remove fields
  - As an example, there's a password on the user basetype.
    When entering a new password, it should be doubled, and checked for equality
  - There's a "dont save" way for fields to be declared. That way, a datacolumn
    can be declard "storage": false and thecolumn will not be saved on the
    data_node.

Plack
-----
- Image handling
  http://search.cpan.org/dist/Plack-Middleware-Image-Scale/ seems to have different problems, most notably w/gifs (not really confirmed)

I D E A S / T E S T I N G
-------------------------

All the more or less crazy ideas that might work. Or perhaps not. 

Attributes of a data node (datacolumns) should not (all) come from the basetype. If the corresponding engine is with a role, that role could require some columns.

Use an array instead of the string (using extension prefix) as path. 
- Branch is feature-array_index
- More flexible. Could potentially be flexible on every node in the array
- Could be achieved using a postgresql function to look up the node(s)
- There's work in PostgreSQL on anyarray; should be kinda intarray
- Problem w/ PostgreSQL and arrays is that [1,2,3,4] @> [3,4] and even [1,2,3,4] @> [2,4] is true
  Seems pg handles arrays as sets, not as arrays.

Archiving
- Some kind of history of data
- Implementation
  Mark columns as archivable in the basetype
  Upon update or delete, add an entry to the archive.

Search
------
- PostgreSQL FTS
  fts should be combinable with ACL for searching, so the search result should reflect the user's permissions
  samecase searches? (test necessesity)
- CPAN
  http://search.cpan.org/dist/Search-Tools/
  https://metacpan.org/release/Data-SearchEngine
  Write a specific Pg fts engine

Path Modifiers
--------------
1. Implementation
  a) For every request, look up each path part and process its modifiers
  b) When inserting a node, let the database update modifiers from upstream
     When updating a node, let the database update modifiers downstream

2. Types
  a) pre - called on the way down
  b) post - called on the way back up

3. Examples
  a) Simple
    1. Breadcrumbs - leave a bc on the stash
    2. Make a choice based on the path part, e.g. choose language

Paging
------
- http://wiki.postgresql.org/wiki/Count_estimate

D O C U M E N T A T I O N
-------------------------

Update the pod, please. This is a holding place for text or ideas to enhance the documentation

Basic, how it's working
  - Split into server process information and per-request information.
    Process information
      schema, config, 
    Per-request information
      rest, stash, node, recipe, response

A T T I C
---------

All the stuff that didn't work, doesn't make sense, or otherwise is not current. But that still holds some value of some kind.

Framework
---------
- Context
  https://metacpan.org/module/DBIx::Connector
  Context replacement
- encoding
  https://metacpan.org/release/utf8-all
  
Template
--------
- Searching
  Standard templates in Djet with File::ShareDir
  Set path as e.g. Text::Xslate->new( path => \@path );
  Should probably be by type in config file
  template
    html
      path
      suffix
- Javascript
  http://search.cpan.org/dist/HTML-JQuery/

AAA
---

Relations
---------

Stash
-----

Transactions
------------
- Specify a way to start / commit / abort transactions
  Perhaps just a transaction plugin

Caching
-------
- Mark page as cachable
  Render first time
  Get from cache and compare expiration time
- Mark recipe step as cachable
  cache => {name => 'foo', expiration => bar}

Djet Schema
----------
- basetype
  pathmatch - a regex to match the endpath (see Djet.pm)
  templatename - relative/absolute?
  response types we can/can't handle
  "traits" like menu, breadcrumbs for each REST type
- path
  Perhaps active flag, active period(s) - or publish time, expiration time
  Problem with this is to find out when to apply
  - For all children?
  - In all cases?
- node
  cache time (interval)
- update, delete data_view triggers
- Trash
  Some way to delete a tree by moving it to a "Trash" node.
  There could be more than one node with the same path part
- Data node
  A set of typed arrays
  - int, text, datetime, timestamp, etc
  - a view that points to the array element
  - How about fts?
  - pros
    Easy to change a node's data definition.
    No data shuffling.
    Better performance for schema changes
  - cons
    One more level of indirection
    How to handle array of arrays
    Indexing made hard
  Or perhaps use hstore
- Recursion detection
  path1->path2->path3->path1 should be disallowed
  incl test

Plack
-----
- Authentication
  ACL for images still a problem

Plugins
-------
- Admin
  Administration should just be another plugin
  Or perhaps a recipe with several plugins
- File Upload
  See notes within about splitting out functionality
  Config option for base dir
  Refactor hash directory handling
  http://xquerywebappdev.wordpress.com/2010/05/21/drag-n-drop-from-desktop-jquery-plugin/
- Data validation
  https://metacpan.org/module/Data::FormValidator
  https://metacpan.org/module/FormValidator::Simple
  https://metacpan.org/module/FormValidator::Lite
  https://metacpan.org/module/Data::Verifier
  https://metacpan.org/module/Oogly
  https://metacpan.org/module/Validation::Class
- Blog
- Webshop
  https://metacpan.org/module/Nitesi
- Accounting
  http://search.cpan.org/dist/Ledger-Parser/

Packages
--------
- Reintroduce the idea of "components" (or just separate recipe out)
  A basetype can have several paths
  A basetype can have several components
  A component can be active for one specific, more, or all REST types
- plugins
  basetype definitions - including recipes
  roles/traits
  an installscript

Recipes
-------
- On startup, Look through all djet.basetypes and 'compile' the recipes
  require the plugin modules
  name the recipe
  cache the recipe in context->recipes
  A load or register method to init the plugin methods
- External help
  https://metacpan.org/module/PNI
  https://metacpan.org/module/Thorium

Data Repository
---------------
- Define Moose base types
  Perl/Moose <-> PostgreSQL mapping
  Data representation(s)
  - html pages
  - lists
  - etc
- Define nodes
  Add "fields" from base types
  DDL to create tables in the data schema
  DDL to add/update /delete columns when fields change
  https://metacpan.org/module/DBIx::RunSQL
- Will make it possible/easier to make a row maker

Testing
-------
- Test database creation
  Use Family::Photo schema
- CPAN
  https://metacpan.org/module/Test::Routine
- pgTAP
  http://pgtap.org/
- path creation
  move a node, see the path change ripple through the tree
  update/delete a leaf node, a stem node, a root node
- Coverage is low
- Test plugins 

Documentation
-------------
- Coverage report
- http://cloc.sourceforge.net/

Logging
-------

Statistics
----------

Exception handling
-------------------
- https://metacpan.org/release/HTTP-Exception
- https://metacpan.org/module/Plack::Middleware::HTTPExceptions

Devel mode
----------
- Optionally turn on/off some features when developing
  Text::Xslate cache

Config
------
1. Rework config handling 
2. Work stash into the module
3. Config file structure
   etc/djet.conf
   <client_dir>/etc/somethi≈Ñg
4. What overrides what?
5. module might be basenode instead?
6. recipe may be better in ;Stuff, where the current :Stuff stuff belongs in Djet ?
