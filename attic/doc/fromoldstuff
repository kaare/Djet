Stuff that may still be useful from the old Stuff.pm

Some kind of generic fts, perhaps in the resultset class of node/datanode
Some kind of generic move
Notify/listen
Transaction management

=head3 ft_search_node

Fulltext search in nodes

=cut

sub ft_search_node {
	my ($self, $terms) = @_;
	my $ftsquery = join ' | ', split /\s+/, $terms;
	return $self->search_node(
		"fts @@ to_tsquery('english','$ftsquery')",
	);
}


=head3 move

Move a node to a new parent in the path tree

=cut

sub move {
	my ($self, $node_id, $parent_id) = @_;
	my $sql = qq{UPDATE
		djet.node
	SET
		parent_id=?
	WHERE
		node_id=?
	};
	return  $self->_execute($sql, [$parent_id, $node_id]);
}

=head2 Notification methods

=head3 listen

Starts listening to notifications

=cut

sub listen {
	my ($self, %args) = @_;
	my $queue = $args{queue} || return undef;

	for my $q (ref $queue ? @$queue : ($queue)) {
		$self->{dbh}->do(qq{listen "$q";});
	}
}

=head3 unlisten

Stops listening to notifications

=cut

sub unlisten {
	my ($self, %args) = @_;
	my $queue = $args{queue} || return undef;

	for my $q (ref $queue ? @$queue : ($queue)) {
		$self->{dbh}->do(qq{unlisten "$q";});
	}
}

=head3 notify

Send a notification

=cut

sub notify {
	my ($self, %args) = @_;
	my $queue = $args{queue} || return undef;
	my $payload = $args{payload};
	my $sql = qq{SELECT pg_notify(?,?)};
	my $task = $self->select_first(
		sql => $sql,
		data => [ $queue, $payload],
	);
}

=head3 get_notification

Get a notification

=cut

sub get_notification {
	my ($self,$timeout) = @_;
	my $dbh = $self->dbh;
	my $notifies = $dbh->func('pg_notifies');
	return $notifies;
}

=head3 set_listen

Start a blocking notification recieve loop

=cut

sub set_listen {
	my ($self,$timeout) = @_;
	my $dbh = $self->dbh;
	my $notifies = $dbh->func('pg_notifies');
	if (!$notifies) {
		my $fd = $dbh->{pg_socket};
		vec(my $rfds='',$fd,1) = 1;
		my $n = select($rfds, undef, undef, $timeout);
		$notifies = $dbh->func('pg_notifies');
	}
	return $notifies || [0,0];
}


=head2 Transaction management methods

=head3 in_transaction_check

=cut

sub in_transaction_check {
	my $self = shift;

	return unless $self->txn_manager;

	if ( my $info = $self->{txn_manager}->in_transaction ) {
		my $caller = $info->{caller};
		my $pid	= $info->{pid};
		Carp::confess("Detected transaction during a connect operation (last known transaction at $caller->[1] line $caller->[2], pid $pid). Refusing to proceed at");
	}
}

=head3 txn_scope

get DBIx::TransactionManager::ScopeGuard's instance object

=cut

sub txn_scope {
	my @caller = caller();
	$_[0]->txn_manager->txn_scope(caller => \@caller);
}

=head3 in_transaction

Checks if we're currently in a transaction

=head3 txn_begin

Start the transaction.

=head3 txn_rollback

Rollback the transaction.

=head3 txn_commit

Commit the transaction.

=head3 txn_end

=cut

sub in_transaction { $_[0]->txn_manager->in_transaction }
sub txn_begin { $_[0]->txn_manager->txn_begin }
sub txn_rollback { $_[0]->txn_manager->txn_rollback }
sub txn_commit { $_[0]->txn_manager->txn_commit	 }
sub txn_end { $_[0]->txn_manager->txn_end }
