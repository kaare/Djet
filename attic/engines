#!/usr/bin/env perl

use 5.010;
use strict;
use warnings;
use JSON;

use Data::Dumper;

use Djet::Config;
use Djet::Stuff;

sub basetype_engine {
	my $data = [
		{
			name => 'List',
			conditions => [
				{
					part => 'Djet::Engine::Condition::Compare',
					default => {
						one => {arg => 1},
						two => undef,
					},
				},
			],
			steps => [
				{
					part => 'Djet::Engine::Part::Stash::Stuff',
					default => {
						stashname  => 'basetypes',
						methodname => 'get_basetypes',
						order      => 'id',
					},
				},
			],
		},
		{
			name => 'Create',
			conditions => [
				{
					part => 'Djet::Engine::Condition::Compare',
					default => {
						two => undef,
					},
				},
				{
					part => 'Djet::Engine::Condition::Request::Method',
					default => {
						requestmethod  => ['POST'],
					},
				},
			],
			steps => [
				{
					part => 'Djet::Engine::Part::Update',
					default => {
						stashname  => 'basetype',
						methodname => 'update_basetype',
					},
				},
			],
		},
		{
			name => 'Update',
			conditions => [
				{
					part => 'Djet::Engine::Condition::Compare',
					default => {
						two => qr/^\d+$/,
					},
				},
				{
					part => 'Djet::Engine::Condition::Request::Method',
					default => {
						requestmethod  => ['POST'],
					},
				},
			],
			steps => [
				{
					part => 'Djet::Engine::Part::Update',
					default => {
						stashname  => 'basetype',
						methodname => 'update_basetype',
					},
				},
				{
					part => 'Djet::Engine::Part::Stash::Stuff',
					default => {
						stashname  => 'basetype',
						methodname => 'find_basetype',
					},
				},
			],
		},
		{
			name => 'Retrieve',
			template => 'basetype/djet/config/basetype/display.tx',
			conditions => [
				{
					name => 'arg1',
					part => 'Djet::Engine::Condition::Compare',
					default => {
						one => {arg => 1},
						two => 'id',
					},
				},
				{
					name => 'arg2',
					part => 'Djet::Engine::Condition::Compare',
					default => {
						one => {arg => 2},
						two => qr/^\d+$/,
					},
				},
			],
			steps => [
				{
					part => 'Djet::Engine::Part::Stash::Basetype',
					default => {
						stashname   => 'basetype',
						stashfields => 'fields',
						key   => 'id',
						value => {arg => 2},
					},
				},
			],
		},
	];
#	say STDERR Dumper( JSON->new->encode($data));
	update_engine('basetype', $data);
}

sub bc_engine {
	my $data = [
		{
			name => 'List',
			conditions => [
				{
					part => 'Djet::Engine::Condition::Response::Type',
					default => {
						response_type => [qr/html/i],
					},
				},
			],
			steps => [
				{
					part => 'Djet::Engine::Part::Node::BC',
					default => {
						stashname  => 'bc',
						template   => 'basetype/bc.tx'
					},
				},
			],
		},
	];
#	say STDERR Dumper( JSON->new->encode($data));
	update_engine('breadcrumbs', $data);
}

our $schema;

sub update_engine {
	my ($engine, $recipe) = @_;
	$schema->insert_or_update_engine({name => $engine}, {recipe => $recipe});
	my $found = $schema->find_engine({name => $engine});
	say STDERR Dumper $found->{recipe}->recipe;
}


sub do_it {
	my $configbase = 'etc/';
	my $config = Djet::Config->new(base => $configbase);
	my @connect_info = @{ $config->djet->{connect_info} };
	my %connect_info;
	$connect_info{$_} = shift @connect_info for qw/dbname username password connect_options/;
	$schema = Djet::Stuff->new(%connect_info);
	basetype_engine;
	bc_engine;
}

do_it;