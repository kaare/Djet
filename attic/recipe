#!/usr/bin/env perl

use 5.010;
use JSON;

use Djet::Context;

use Data::Dumper;

sub update_person_recipe {
	my $data = {
		steps => [
			{
				verb => 'PUT',
				plugin => 'Node::New',
				static => {
					basetype => 'photoalbum',
				},
				content => {
					names => {
						albumname => 'albumname',
						part => 'albumname',
						title => 'albumname',
					},
				},
			},
			{
				plugin => 'Node::Stash',
				static => {
					method => 'children',
					params => {base_type => 'photoalbum'},
					name => 'photoalbums',
				},
			},
			{
				plugin => 'Node::Stash',
				static => {
					method => 'parents',
					params => {base_type => 'usergroup'},
					name => 'parents',
				},
			},
			{
				plugin => 'Node::Stash',
				stash => {
					nodes => 'parents',
				},
				static => {
					method => 'children',
					params => {base_type => 'photoalbum'},
					name => 'groupalbums',
				},
			},
			{
				plugin => 'Node::Stitch',
				stash => {
					nodes => [qw/photoalbums groupalbums/],
				},
				static => {
					path => qq{children(base_type => 'photoalbum')},
					name => 'albums',
				},
			},
			{
				plugin => 'Node::Uniq',
				stash => {
					nodes => 'albums',
				},
				static => {
					name => 'albums',
				},
			},
			{
				plugin => 'Node::Pick',
				stash => {
					nodes => 'albums',
				},
				static => {
					column => 'title',
					value => 'Scratchpad',
					name => 'scratch',
					remainder => 'albums',
				},
			},
		],
		paths => {
			upload => [
				{
					plugin => 'File::Upload',
					verb => 'POST',
					static => {
						parent_id => 'workalbum_id',
					},
				},
			],
		},
		html_templates => {
			upload => 'upload',
		},
	};
	say STDERR Dumper( JSON->new->encode($data));
	update_node('person', $data);
}

sub update_basetype_recipe {
	my $data = {
		paths => {
			basetypes => [
				{
					part => 'Stash',
					static => {
						stashname => 'basetypes',
						method    => 'get_basetypes',
						order     => 'id',
					},
				},
			],
			basetype => [
				{
					part => 'Stash',
					static => {
						stashname => 'basetype',
						method    => 'find_basetype',
					},
					content => {
						where => {
							id => 'id',
						},
					},
				},
			],
		},
		html_templates => {
			basetypes => 'djet/config/basetypes',
		},
	};
	say STDERR Dumper( JSON->new->encode($data));
	update_node('djet_config', $data);
}

sub update_node {
	my ($basetype, $recipe) = @_;
	my $c = Djet::Context->instance;
	my $schema = $c->schema;
	$schema->update_basetype({name => $basetype}, {recipe => $recipe});
	say STDERR Dumper $recipe, $schema->find_basetype({name => 'domain'});
}

#update_person_recipe;
update_config_recipe;
update_basetype_recipe;